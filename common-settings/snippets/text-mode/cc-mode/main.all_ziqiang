#name : full_main_ziqiang
# --
/***************************************************************
 *
 * Copyright (c) 2011, crackcell <tanmenglong@gmail.com>
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the BSD licence
 *
 **************************************************************/

/**
 * @file `(file-name-nondirectory (buffer-file-name))`
 * @author TanMenglong <tanmenglong@gmail.com>
 * @date `(current-time-string)`
 * @version $Revision$ 
 * @brief $1
 *
 **/

#include <iostream>
#include <boost/program_options.hpp>
#include <boost/filesystem.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/xml_parser.hpp>

using namespace std;
using namespace boost;

void load_args(int argc, char *argv[])
{
    namespace po = boost::program_options;
    namespace fs = boost::filesystem;

    try {
        po::options_description desc("allowed options");
        desc.add_options()
            ("help,h", "display help message")
            ("conf,c", po::value<string>(), "conf file");
        po::variables_map vm;
        po::store(po::parse_command_line(argc, argv, desc), vm);
        po::notify(vm);
        
        if (vm.count("help")) {
            cout << desc << endl;
            exit(0);
        }
        
        if (vm.count("conf")) {
            fs::path path(vm["conf"].as<string>());
            cout << "dir: " << path.parent_path() << endl;
            cout << "filename: " << path.filename() << endl;;
        } else {
            cout << "no conf file specified.\n";
            exit(-1);
        }
        
    } catch(::std::exception& e) {
        cerr << "error: " << e.what() << "\n";
        exit(-1);
    } catch(...) {
        cerr << "unknown exception!\n";
        exit(-1);
    }
}

void load_config(const std::string &filename)
{
    using boost::property_tree::ptree;
    ptree pt;
    read_xml(filename, pt);
    string conf0 = pt.get<std::string>("debug.filename");
    int conf1 = pt.get<int>("debug.level");
    int conf1 = pt.get("debug.level", 0);
}

int main(int argc, char *argv[])
{
    load_args(argc, argv);
	$3
    return 0;
}
